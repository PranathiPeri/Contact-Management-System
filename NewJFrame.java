
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
/* If this doesn't work, do the following :
          * right click on
         * project properties --> Java Build Path --> Libraries --> add rs2xml Jar to your project(which you already downloaded)
         *  This is the JAR required for using Dbutils
*/

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author perip
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        updateContact.setVisible(false);
        sex.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel20 = new javax.swing.JLabel();
        JtabbedPane1 = new javax.swing.JTabbedPane();
        contactdetails = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        phno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        phtype = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        emailAddr = new javax.swing.JTextField();
        fname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        emailtype = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        street = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        hnumb = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        city = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        state = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        country = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        addrtype = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        sex = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        flyname = new javax.swing.JTextField();
        addContact = new javax.swing.JButton();
        msg_error = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        areacode = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        place = new javax.swing.JTextField();
        updateContact = new javax.swing.JButton();
        dob = new javax.swing.JFormattedTextField();
        apptdate = new javax.swing.JFormattedTextField();
        apptym = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        sex1 = new javax.swing.JComboBox<>();
        viewcontacts = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewtbl = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        viewcontacts1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel20.setText("Contact Manager");

        contactdetails.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Middle Name :");
        contactdetails.add(jLabel2);
        jLabel2.setBounds(321, 30, 120, 20);
        contactdetails.add(mname);
        mname.setBounds(450, 30, 140, 26);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Last Name * :");
        contactdetails.add(jLabel3);
        jLabel3.setBounds(660, 30, 108, 22);
        contactdetails.add(lname);
        lname.setBounds(785, 30, 110, 26);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Phone Number * :");
        contactdetails.add(jLabel4);
        jLabel4.setBounds(40, 120, 150, 22);

        phno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phnoActionPerformed(evt);
            }
        });
        contactdetails.add(phno);
        phno.setBounds(200, 110, 180, 26);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("Phone Type * :");
        contactdetails.add(jLabel5);
        jLabel5.setBounds(660, 110, 130, 22);

        phtype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phtypeActionPerformed(evt);
            }
        });
        contactdetails.add(phtype);
        phtype.setBounds(810, 110, 170, 26);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("Email Address * :");
        contactdetails.add(jLabel6);
        jLabel6.setBounds(51, 190, 150, 22);

        emailAddr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailAddrActionPerformed(evt);
            }
        });
        contactdetails.add(emailAddr);
        emailAddr.setBounds(200, 190, 210, 26);

        fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameActionPerformed(evt);
            }
        });
        contactdetails.add(fname);
        fname.setBounds(180, 30, 120, 26);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("First Name * :");
        contactdetails.add(jLabel1);
        jLabel1.setBounds(50, 30, 120, 22);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setText("Email Type * :");
        contactdetails.add(jLabel7);
        jLabel7.setBounds(510, 190, 130, 22);
        contactdetails.add(emailtype);
        emailtype.setBounds(640, 190, 170, 26);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setText("Address");
        contactdetails.add(jLabel8);
        jLabel8.setBounds(50, 260, 80, 22);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setText("Street * :");
        contactdetails.add(jLabel9);
        jLabel9.setBounds(150, 260, 90, 22);
        contactdetails.add(street);
        street.setBounds(230, 260, 140, 26);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setText("House No :");
        contactdetails.add(jLabel10);
        jLabel10.setBounds(430, 260, 100, 22);
        contactdetails.add(hnumb);
        hnumb.setBounds(540, 260, 120, 26);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel11.setText("City:");
        contactdetails.add(jLabel11);
        jLabel11.setBounds(730, 260, 50, 22);
        contactdetails.add(city);
        city.setBounds(780, 260, 110, 26);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel12.setText("State :");
        contactdetails.add(jLabel12);
        jLabel12.setBounds(150, 310, 70, 22);
        contactdetails.add(state);
        state.setBounds(230, 310, 140, 26);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel13.setText("Country :");
        contactdetails.add(jLabel13);
        jLabel13.setBounds(430, 310, 90, 22);
        contactdetails.add(country);
        country.setBounds(540, 310, 120, 26);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel14.setText(" Type * :");
        contactdetails.add(jLabel14);
        jLabel14.setBounds(700, 310, 80, 22);
        contactdetails.add(addrtype);
        addrtype.setBounds(780, 310, 110, 26);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel15.setText("Sex :");
        contactdetails.add(jLabel15);
        jLabel15.setBounds(150, 370, 60, 22);

        sex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sexActionPerformed(evt);
            }
        });
        contactdetails.add(sex);
        sex.setBounds(270, 370, 60, 26);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel16.setText("Date Of Birth  *:");
        contactdetails.add(jLabel16);
        jLabel16.setBounds(390, 370, 140, 22);

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel17.setText("Appointment Details  :");
        contactdetails.add(jLabel17);
        jLabel17.setBounds(50, 430, 190, 30);

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel19.setText("Family Name * :");
        contactdetails.add(jLabel19);
        jLabel19.setBounds(90, 500, 130, 22);

        flyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flynameActionPerformed(evt);
            }
        });
        contactdetails.add(flyname);
        flyname.setBounds(230, 500, 200, 26);

        addContact.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addContact.setText("Add Contact ");
        addContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactActionPerformed(evt);
            }
        });
        contactdetails.add(addContact);
        addContact.setBounds(420, 540, 190, 40);
        contactdetails.add(msg_error);
        msg_error.setBounds(680, 510, 60, 20);

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel21.setText("Area Code :");
        contactdetails.add(jLabel21);
        jLabel21.setBounds(410, 110, 100, 22);
        contactdetails.add(areacode);
        areacode.setBounds(510, 110, 100, 26);

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel22.setText("Place :");
        contactdetails.add(jLabel22);
        jLabel22.setBounds(850, 430, 60, 22);
        contactdetails.add(place);
        place.setBounds(940, 430, 120, 26);

        updateContact.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        updateContact.setText("Update Contact");
        updateContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateContactActionPerformed(evt);
            }
        });
        contactdetails.add(updateContact);
        updateContact.setBounds(720, 540, 170, 40);

        dob.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-M-d"))));
        contactdetails.add(dob);
        dob.setBounds(530, 370, 156, 26);

        apptdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-M-d"))));
        contactdetails.add(apptdate);
        apptdate.setBounds(370, 430, 90, 26);

        apptym.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm:ss"))));
        apptym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apptymActionPerformed(evt);
            }
        });
        contactdetails.add(apptym);
        apptym.setBounds(640, 430, 110, 26);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel18.setText("Time * :");
        contactdetails.add(jLabel18);
        jLabel18.setBounds(530, 430, 80, 22);

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel23.setText("Date * :");
        contactdetails.add(jLabel23);
        jLabel23.setBounds(310, 430, 60, 20);

        sex1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M", "F" }));
        contactdetails.add(sex1);
        sex1.setBounds(210, 370, 43, 26);

        JtabbedPane1.addTab("Add Contacts", contactdetails);

        viewtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ContactId", "FirstName", "MiddleName", "LastName", "Date of Birth", "Gender", "EmailId", "EmailType", "PhoneNumber", "area code", "PhoneType", "street", "housenumber", "city", "state", "country", "addresstype", "familyname", "Appointment Date", "Appointment time", "Place"
            }
        ));
        viewtbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewtblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(viewtbl);

        delete.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        viewcontacts1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        viewcontacts1.setText("View Contacts");
        viewcontacts1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewcontacts1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewcontactsLayout = new javax.swing.GroupLayout(viewcontacts);
        viewcontacts.setLayout(viewcontactsLayout);
        viewcontactsLayout.setHorizontalGroup(
            viewcontactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewcontactsLayout.createSequentialGroup()
                .addGroup(viewcontactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewcontactsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(viewcontactsLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(viewcontacts1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        viewcontactsLayout.setVerticalGroup(
            viewcontactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewcontactsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addGroup(viewcontactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewcontacts1)
                    .addComponent(update)
                    .addComponent(delete))
                .addContainerGap(297, Short.MAX_VALUE))
        );

        JtabbedPane1.addTab("View Contacts", viewcontacts);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JtabbedPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(426, 426, 426)
                .addComponent(jLabel20)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JtabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void phnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phnoActionPerformed

    private void phtypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phtypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phtypeActionPerformed

    private void emailAddrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailAddrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailAddrActionPerformed

    private void fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameActionPerformed

    private void sexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sexActionPerformed
/*  This method is used to add new contacts to database */
    private void addContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactActionPerformed
        // TODO add your handling code here:
        // Bringing  the data from the panel and storing into variables so that it can be used for further processing
        String firstname = fname.getText();
        String middlename= mname.getText();
        String lastname= lname.getText();
        String phonenumber=phno.getText();
        String arcode=areacode.getText();
        String phonetype=phtype.getText();
        String emailid=emailAddr.getText();
        String emailtyp=emailtype.getText();
        String stret=street.getText();
        String houseno=hnumb.getText();
        String cty=city.getText();
        String stat=state.getText();
        String county=country.getText();
        String addtype=addrtype.getText();
        String gender=sex1.getSelectedItem().toString();
        String dateofbirth=dob.getText();
        String aptdate=apptdate.getText();
        String apttym=apptym.getText();
        String plac=place.getText();
        String familyname=flyname.getText();
      
        /* Checking if the data is valid or not 
            If the data is valid it must be entered into database or else it must not be .
        */
        
        if(fname.equals("")||lname.equals("")||phno.equals("")||phtype.equals("")||emailAddr.equals("")||emailtype.equals("")||addrtype.equals("")||dob.equals("")||apptdate.equals("")||apptym.equals("")||stret.equals("")||flyname.equals(""))
        {
            JOptionPane.showMessageDialog(contactdetails , " * fields are to be entered");
        }    
        else
        {
            /* Checking if the phonenumber is a valid 10 digit one */
            if(!phonenumber.matches("[0-9]{10}"))
                    {
                        JOptionPane.showMessageDialog(contactdetails , " PhoneNumber should  be 10 digits");
                    }
            /* Checking if the email address is valid or not*/
            else if(!emailAddr.getText().contains("@"))
                   {
                       JOptionPane.showMessageDialog(contactdetails , " Email  should  contain @");
                    }
            /* checking if areacode is 4 digits*/
            else if(arcode.length()>5)
            {
             JOptionPane.showMessageDialog(contactdetails , " Area code  should be 5 digits");   
            }
            else
            {
                /* Data that is entered  by the user is valid so we need to insert it into the database.
                   Here we are getting connection to database and then we are inserting it into the database.
                To insert data into DB i have implemented a stored procedure sp_insertuser.Here a call to the stored procedure is made. 
                */
                try {
            DBConnection db=new DBConnection();
            Connection con=db.getConnection(); //to get a database connection
            String query="CALL sp_insertuser(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";//Stored Procedure
            PreparedStatement stmt;
            stmt = con.prepareStatement(query);
            stmt.setString(1,firstname);
            stmt.setString(2,middlename);
            stmt.setString(3,lastname);
            stmt.setString(4,phonenumber);
            stmt.setString(5,arcode);
            stmt.setString(6,phonetype);
            stmt.setString(7,emailid);
            stmt.setString(8,emailtyp);
            stmt.setString(9,stret);
            stmt.setString(10,houseno);
            stmt.setString(11,cty);
            stmt.setString(12,stat);
            stmt.setString(13,county);
            stmt.setString(14,addtype);
            stmt.setString(15,gender);
             stmt.setString(16,dateofbirth);
            stmt.setString(17,aptdate);
            stmt.setString(18, apttym);           
            stmt.setString(19,plac);
            stmt.setString(20,familyname);

            int i=stmt.executeUpdate();
            db.closeConnection();         // To close database connection
             /* Checking whether the query is executed and resetting the form to null*/
            if(i==1)
            {
                JOptionPane.showMessageDialog(contactdetails , "Contact  Successfully Added");
                fname.setText("");
                mname.setText("");
                lname.setText("");
                phno.setText("");
                areacode.setText("");
                phtype.setText("");
                emailAddr.setText("");
                emailtype.setText("");
                street.setText("");
                hnumb.setText("");
                city.setText("");
                state.setText("");
                country.setText("");
                addrtype.setText("");
                //sex.setText("");
                 dob.setText("");
                apptdate.setText("");
                apptym.setText("");
                place.setText("");
                flyname.setText("");

            }

        } catch (SQLException ex) {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
        }

    }   
        }
    }//GEN-LAST:event_addContactActionPerformed

    private void viewtblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewtblMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_viewtblMouseClicked
     
    /* This method is used to delete the contacts.
       Here we are selecting the contact which you want to delete and  are getting the contactid .
      Later we are deleting the contact using the contactid  */
    
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int rowIndex = viewtbl.getSelectedRow();
        String cid = Integer.toString((int)viewtbl.getValueAt(rowIndex, 0));
        System.out.print(cid);
        try
        {
            DBConnection db=new DBConnection();
            Connection con=db.getConnection();
            Statement stmt=con.createStatement();
            stmt.executeUpdate("delete from CONTACTPERSON where contactid="+cid);              

          db.closeConnection();
        }
        catch (SQLException ex) {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed

    /* This method is used to view contacts. 
      This queries the database and data is displayed in jtable.
      This method selects data from a VIEW  which is created in database */
    
    private void viewcontacts1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewcontacts1ActionPerformed
        // TODO add your handling code here:
        jScrollPane1.setVisible(true);
        contactdetails.setVisible(false);
        //home.setVisible(true);

        try
        {
            DBConnection db=new DBConnection();
            Connection con=db.getConnection();
            Statement stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery("select * from vw_update_contact_details");
            viewtbl.setModel(DbUtils.resultSetToTableModel(rs));

            db.closeConnection();
        }
        catch (SQLException ex) {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_viewcontacts1ActionPerformed

    private void flynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flynameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flynameActionPerformed

    
    /* This method is used to select  the contact which we want to update.
      We are selecting the required contact from the jtable which gives the contactid
      and then we are  setting the values to the form so that user can update  the required value*/
    
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        JtabbedPane1.setSelectedIndex(0);
         addContact.setVisible(false);
         updateContact.setVisible(true);
         sex.setVisible(true);
        int rowIndex = viewtbl.getSelectedRow();
        String cid = Integer.toString((int)viewtbl.getValueAt(rowIndex, 0));
        System.out.print(cid);
        try
        {
            DBConnection db=new DBConnection();
            Connection con=db.getConnection();
            Statement stmt=con.createStatement();
           ResultSet rs= stmt.executeQuery("select *  from vw_update_contact_details where contactid="+cid);
           while(rs.next())
           {
               fname.setText(rs.getString("firstname"));
               mname.setText(rs.getString("middlename"));
               lname.setText(rs.getString("lastname"));
               dob.setText(rs.getString("dateofbirth"));
               sex.setText(rs.getString("gender"));
               emailAddr.setText(rs.getString("emailId"));
               emailtype.setText(rs.getString("emailType"));
               phno.setText(rs.getString("phonenumber"));
               areacode.setText(rs.getString("areacode"));
               phtype.setText(rs.getString("phonetype"));
               street.setText(rs.getString("street"));
               hnumb.setText(rs.getString("houseno"));
               city.setText(rs.getString("city"));
               state.setText(rs.getString("state"));
               country.setText(rs.getString("country"));
               addrtype.setText(rs.getString("addresstype"));
               flyname.setText(rs.getString("familyname"));                           
               apptdate.setText(rs.getString("apptdate"));
               apptym.setText(rs.getString("appttime"));
              place.setText(rs.getString("place"));
              
          }
            

            db.closeConnection();
        }
        catch (SQLException ex) {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_updateActionPerformed

    /* This method is used to update the contact.
      This method calls a stored procedure sp_updateuser which is used to update the info   */
    
    private void updateContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateContactActionPerformed
        // TODO add your handling code here:
        int rowIndex = viewtbl.getSelectedRow();
        String cid = Integer.toString((int)viewtbl.getValueAt(rowIndex, 0));
        System.out.print(cid);
        
        
        String firstname = fname.getText();
        String middlename= mname.getText();
        String lastname= lname.getText();
        String phonenumber=phno.getText();
        String arcode=areacode.getText();
        String phonetype=phtype.getText();
        String emailid=emailAddr.getText();
        String emailtyp=emailtype.getText();
        String stret=street.getText();
        String houseno=hnumb.getText();
        String cty=city.getText();
        String stat=state.getText();
        String county=country.getText();
        String addtype=addrtype.getText();
        String gender=sex1.getSelectedItem().toString();
        //String sx=sex.getText();
        //String gender=sx.substring(0,1);
        String dateofbirth=dob.getText();
        String aptdate=apptdate.getText();
        String apttym=apptym.getText();
        String plac=place.getText();
        String familyname=flyname.getText();
        
        
 if(fname.equals("")||lname.equals("")||phno.equals("")||phtype.equals("")||emailAddr.equals("")||emailtype.equals("")||addrtype.equals("")||dob.equals("")||apptdate.equals("")||apptym.equals("")||stret.equals("")||flyname.equals(""))
        {
            JOptionPane.showMessageDialog(contactdetails , " * fields are to be entered");
        }    
        else
        {
            /* Checking if the phonenumber is a valid 10 digit one */
            if(!phonenumber.matches("[0-9]{10}"))
                    {
                        JOptionPane.showMessageDialog(contactdetails , " PhoneNumber should  be 10 digits");
                    }
            else if(!emailAddr.getText().contains("@"))
                   {
                       JOptionPane.showMessageDialog(contactdetails , " Email  should  contain @");
                    }
                    /* checking if areacode is 4 digits*/
            else if(arcode.length()>5)
            {
             JOptionPane.showMessageDialog(contactdetails , " Area code  should be 5 digits");   
            }
            else
            {
             try {
            DBConnection db=new DBConnection();
            Connection con=db.getConnection();
            String query="CALL sp_updateuser(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
            PreparedStatement stmt;
            stmt = con.prepareStatement(query);
            stmt.setString(1,cid);
            stmt.setString(2,firstname);
            stmt.setString(3,middlename);
            stmt.setString(4,lastname);
            stmt.setString(5,phonenumber);
            stmt.setString(6,arcode);
            stmt.setString(7,phonetype);
            stmt.setString(8,emailid);
            stmt.setString(9,emailtyp);
            stmt.setString(10,stret);
            stmt.setString(11,houseno);
            stmt.setString(12,cty);
            stmt.setString(13,stat);
            stmt.setString(14,county);
            stmt.setString(15,addtype);
            stmt.setString(16,gender);
             stmt.setString(17,dateofbirth);
            stmt.setString(18,aptdate);
            stmt.setString(19,apttym );                     
            stmt.setString(20,plac);
            stmt.setString(21,familyname);

            int i=stmt.executeUpdate();
            db.closeConnection();

            if(i==1)
            {
                JOptionPane.showMessageDialog(contactdetails , "Contact  Successfully Updated");
                fname.setText("");
                mname.setText("");
                lname.setText("");
                phno.setText("");
                areacode.setText("");
                phtype.setText("");
                emailAddr.setText("");
                emailtype.setText("");
                street.setText("");
                hnumb.setText("");
                city.setText("");
                state.setText("");
                country.setText("");
                addrtype.setText("");
                sex.setText("");
                dob.setText("");
                apptdate.setText("");
                apptym.setText("");
                place.setText("");
                flyname.setText("");
                updateContact.setVisible(false);
                addContact.setVisible(true);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
        }

        }
        }
    }//GEN-LAST:event_updateContactActionPerformed

    private void apptymActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apptymActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apptymActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane JtabbedPane1;
    private javax.swing.JButton addContact;
    private javax.swing.JTextField addrtype;
    private javax.swing.JFormattedTextField apptdate;
    private javax.swing.JFormattedTextField apptym;
    private javax.swing.JTextField areacode;
    private javax.swing.JTextField city;
    private javax.swing.JPanel contactdetails;
    private javax.swing.JTextField country;
    private javax.swing.JButton delete;
    private javax.swing.JFormattedTextField dob;
    private javax.swing.JTextField emailAddr;
    private javax.swing.JTextField emailtype;
    private javax.swing.JTextField flyname;
    private javax.swing.JTextField fname;
    private javax.swing.JTextField hnumb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lname;
    private javax.swing.JTextField mname;
    private javax.swing.JLabel msg_error;
    private javax.swing.JTextField phno;
    private javax.swing.JTextField phtype;
    private javax.swing.JTextField place;
    private javax.swing.JTextField sex;
    private javax.swing.JComboBox<String> sex1;
    private javax.swing.JTextField state;
    private javax.swing.JTextField street;
    private javax.swing.JButton update;
    private javax.swing.JButton updateContact;
    private javax.swing.JPanel viewcontacts;
    private javax.swing.JButton viewcontacts1;
    private javax.swing.JTable viewtbl;
    // End of variables declaration//GEN-END:variables
}
